from typing import List, Tuple

import django.contrib.postgres.fields as postgres_fields
from django.db import models
from django.utils.translation import gettext_lazy as _
from mptt.fields import TreeForeignKey
from mptt.models import MPTTModel

MAX_MESSAGE_ID_LEN = 512


def upload_path(email, filename):
	if not email.id or not email.date:
		raise Exception("id and date must be set before uploading the email's envelope.")
	return f'emails/{email.date.year}/{email.date.month}/{email.id}.eml'


class Email(MPTTModel):
	parent = TreeForeignKey('self', on_delete=models.CASCADE, null=True, blank=True, related_name='children')

	from_name = models.CharField(max_length=255, null=False)
	from_address = models.CharField(max_length=255, null=False)
	to_names = postgres_fields.ArrayField(models.CharField(max_length=255, null=False))
	to_addresses = postgres_fields.ArrayField(models.CharField(max_length=255, null=False))
	cc_names = postgres_fields.ArrayField(models.CharField(max_length=255, null=False))
	cc_addresses = postgres_fields.ArrayField(models.CharField(max_length=255, null=False))

	subject = models.CharField(max_length=512, null=False)
	date = models.DateTimeField(null=False)

	# The text is just a basic representation of the email's main content. All HTML tags are stripped,
	# all runs whitespace characters are replaced by single spaces. This column should only be used for searching.
	# If you want to display the real email content, use the original email file saved through the envelope property.
	text = models.TextField(null=False)

	num_attachments = models.IntegerField(default=0, null=False)

	# Threading fields

	# "Unique" message id
	# The message id is generated by the email sender and should be unique.
	# However, misconfigured or evil senders might reuse the same message id.
	message_id = models.CharField(max_length=MAX_MESSAGE_ID_LEN, null=False)
	# If this is a reply to another email, it contains the message id of the
	# directly replied to email.
	in_reply_to = models.CharField(max_length=MAX_MESSAGE_ID_LEN, null=True)
	# Contains all message ids of the email thread. However, email clients
	# are allowed to only list a subset of the thread's message ids if they
	# become to large.
	references = postgres_fields.ArrayField(models.CharField(max_length=MAX_MESSAGE_ID_LEN, null=False), null=False)

	# The raw email file as received from the server
	envelope = models.FileField(upload_to=upload_path)

	def to(self) -> List[Tuple[str, str]]:
		return list(zip(self.to_names, self.to_addresses))

	def cc(self) -> List[Tuple[str, str]]:
		return list(zip(self.cc_names, self.cc_addresses))

	def subject_nonempty(self):
		return self.subject if self.subject else _('<No Subject>')

	class Meta:
		indexes = [
			models.Index(fields=['date'])
		]
